<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="repository.mybatis.mapper.CommentMapper">
	<cache />

	<sql id="BaseColumns">
		comment_no AS commentNo,
		title AS title,
		user_id AS userId,
		comment_content AS commentContent,
		course_id AS courseId,
		reg_date AS regDate
	</sql>
	
	<select id="selectAllComments"
		resultType="model.Comment">
		SELECT <include refid="BaseColumns"/>
		FROM COMMENTS
		ORDER BY comment_no DESC
	</select>

	<select id="selectCommentByPrimaryKey" parameterType="long" 
		resultType="model.Comment">
		SELECT <include refid="BaseColumns"/>
		FROM COMMENTS
		WHERE comment_no = #{commentNo}
	</select>
	
	<select id="selectCommentsByUserId" parameterType="int"
		resultType="model.Comment">
		SELECT <include refid="BaseColumns"/>
		FROM COMMENTS
		WHERE user_id = #{userId}
	</select>
 
	<select id="selectCommentByCondition" parameterType="hashmap" 
		resultType="model.Comment">
		SELECT <include refid="BaseColumns"/>
		FROM COMMENTS
		<where>
			<if test="commentNo != null">
				comment_no = #{commentNo}
			</if>
			<if test="userId != null">
				AND user_id = #{userId}
			</if>
		</where>
	</select>

	<insert id="insertComment" parameterType="model.Comment">
		<selectKey keyProperty="commentNo" resultType="long" order="BEFORE">
			SELECT comment_no_Seq.nextval AS comment_no FROM DUAL
		</selectKey>
		INSERT INTO COMMENTS (comment_no, title, user_id, comment_content, course_id, reg_date)
		VALUES (#{commentNo}, #{title}, #{userId}, #{commentContent}, #{courseId}, #{regDate})
	</insert>

	<update id="updateComment" parameterType="model.Comment">
		UPDATE COMMENTS 
		SET comment_content = #{commentContent}
		WHERE comment_no = #{commentNo}
	</update>
 
	<delete id="deleteComment" parameterType="long">
		DELETE FROM COMMENTS
		WHERE comment_no = #{commentNo}
	</delete>
	
	<delete id="deleteAllComments">
		DELETE FROM COMMENTS
	</delete>

	<resultMap id="collectionResultMap" type="Comment">
      <id column="comment_no" jdbcType="BIGINT" property="commentNo" />
      <result column="user_id" jdbcType="VARCHAR" property="userId" />
      <result column="comment_content" jdbcType="VARCHAR" property="commentContent" />
      <result column="reg_date" jdbcType="TIMESTAMP" property="regDate" />
      <collection property="replies" ofType="Reply">
         <id property="replyId" column="reply_id" />
         <result property="userId" column="reply_user_id" />
         <result property="replyContent" column="reply_content" />
         <result property="regDate" column="reply_date" />
         <result property = "nickname" column = "nickname"/>
      </collection>
   </resultMap>
   
   <select id="selectCommentByPrimaryKeyCollection" parameterType="long"          
      resultMap="collectionResultMap"> 
      SELECT c.comment_no, c.user_id, c.comment_content, c.reg_date, 
         r.reply_id, r.user_id AS reply_user_id, r.reply_content, r.reg_date AS reply_date, u.nickname AS nickname
      FROM COMMENTS c, REPLY r, User_info u 
      WHERE c.comment_no = r.comment_no AND u.user_id = r.user_id
        AND c.comment_no = #{commentNo} 
   </select> 
   
   <insert id="insertReply" parameterType="model.Reply">
      <selectKey keyProperty="replyId" resultType="long" order="BEFORE">
         SELECT reply_id_Seq.nextval AS reply_id FROM DUAL
      </selectKey>
      INSERT INTO REPLY (reply_id, comment_no, user_id, reply_content, reg_date)
      VALUES (#{replyId}, #{commentNo}, #{userId}, #{replyContent}, #{regDate})
   </insert>

   <delete id="deleteAllReplies">
      DELETE FROM REPLY
   </delete>

</mapper>